(in-package :stumpwm)

;; Start up swank
(require :swank)
(swank-loader:init)

;; port 4004, so I don't accidentally mess up the wm from Emacs...
(swank:create-server :port 4004
					 :style swank:*communication-style*)

;; Set the contrib path
(set-module-dir "/home/kaashif/src/lisp/stumpwm-contrib")

;; Bound to left win key, from xmodmap
(set-prefix-key (kbd "F20"))

(defcommand emacs () ()
  "Runs Emacs or raises an already running Emacs"
  (run-or-raise "emacs" '(:class "Emacs")))

(define-key *root-map* (kbd "e") "emacs")

(defcommand firefox () ()
  "Runs Firefox or raises an already running Firefox"
  (run-or-raise "firefox" '(:class "Iceweasel")))

(define-key *root-map* (kbd "f") "firefox")

(define-key *root-map* (kbd "t") "exec urxvt")

;; IRC
(defcommand irc () ()
  "Runs an IRC client or raises an already running one"
  (run-or-raise "urxvt -t 'IRC' -e 'weechat'" '(:title "WeeChat 1.2")))

(define-key *root-map* (kbd "i") "irc")

;; Set font and colour of modeline
(set-font "-*-terminus-medium-r-normal-*-7-*-*-*-*-*-iso10646-1")
(setf *mode-line-background-color* "Gray10")
(setf *mode-line-foreground-color* "Gray66")


;; Turn the modeline on
;;(if (not (head-mode-line (current-head)))
;;	(toggle-mode-line (current-screen) (current-head)))

(defcommand retoggle-mode-line () ()
  "Toggles the modeline off and on"
  (toggle-mode-line (current-screen) (current-head))
  (toggle-mode-line (current-screen) (current-head)))

(setf *mode-line-pad-y* 0)

;; Set up the MPD song stuff
(load-module "mpd")
(setf mpd:*mpd-modeline-fmt* "%S: %a - %t %e/%l")
(mpd:mpd-connect)

;; Bind audio keys (amixer module give a nice volume window)

(load-module "amixer")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Master-5-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Master-5+")
(define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle")

;; Music!
(define-key *top-map* (kbd "XF86AudioPrev") "mpd-prev")
(define-key *top-map* (kbd "XF86AudioNext") "mpd-next")
(define-key *top-map* (kbd "XF86AudioPlay") "mpd-toggle-pause")

;; Browse for a playlist to play
(defcommand mpd-clear-and-select-playlist (playlist) ((:string "Playlist: "))
  "Clears current playlist and adds a new one"
  (if (null playlist)
	  (message "No playlist chosen")
	  (progn (mpd:mpd-clear)
			 (mpd:mpd-format-command "load ~a" (concatenate 'string "\"" playlist "\""))
			 (mpd:mpd-play))))

(define-key *root-map* (kbd "d") "mpd-clear-and-select-playlist")

(define-key *root-map* (kbd "q") "delete")

;; For CPU load and temp - %c and %t
;;(load-module "cpu")

;; Makes window (in window list) have more useful info and be more separated
(setf *window-format* "%n%s%c")

;; Battery stuff (provides %B)
(load-module "battery-portable")

;; Display some useful info in the modeline
(setf *screen-mode-line-format* (list "[%n] %w ^> %B | %c %t | %m | "'(:eval (run-shell-command "echo -n `date +'%A %d %B %Y %H:%M:%S'`" t))))

;; Update every second, obviously
(setf *mode-line-timeout* 1)

;; Focus follows mouse
(setf *mouse-focus-policy* :sloppy)

;; It looks really, really bad without this
(setf *window-border-style* :none)

;; Make a load of workspaces
(mapcar #'gnew (list "Terminals" "IRC" "Emacs" "Misc"))

;; This is the split I'll want most often
(defcommand hsplit-2-1 () ()
  "hsplit in a 2:1 ratio"
  (hsplit "2/3"))

(define-key *root-map* (kbd "v") "hsplit-2-1")

(define-key *root-map* (kbd "C-r") "remove-split")

(define-key *root-map* (kbd "S-Right") "exchange-direction right")
(define-key *root-map* (kbd "S-Left") "exchange-direction left")
(define-key *root-map* (kbd "S-Up") "exchange-direction up")
(define-key *root-map* (kbd "S-Down") "exchange-direction down")

;; Function to find an executable
(defun find-exec (name)
  (let ((paths (list #P"/usr/X11R6/bin/" #P"/usr/bin/")))
	(loop for path in paths
	   for exe = (merge-pathnames name path)
	   do
		 (if (probe-file exe)
			 (return exe)
			 nil))))

;; Toggle between -variant dvorakukp gb and gb
;; (we start in gb)
(defvar dvorak? nil)

(defcommand toggle-keyboard-layout () ()
  "toggles between dvorak and gb layouts"
  (let ((args (if dvorak?
				  '("gb")
				  '("dvorak")))
		(msg (if dvorak? "gb" "dvorak"))
		(setxkbmap (find-exec "setxkbmap"))
		(xmodmap (find-exec "xmodmap")))
	(sb-ext:run-program setxkbmap args)
	(sb-ext:run-program xmodmap '("/home/kaashif/.xmodmap"))
	(message (concatenate 'string "Switched layout to " msg "."))
	(setf dvorak? (not dvorak?))))

(define-key *root-map* (kbd "SPC") "toggle-keyboard-layout")

;;(run-commands "retoggle-mode-line")


